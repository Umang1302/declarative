"use client";

import React from "react";
import {
  Avatar,
  Badge,
  Card,
  CardBody,
  Typography,
} from "@material-tailwind/react";
import Image from "next/image";

import { Cabin } from "next/font/google";
const cabin = Cabin({ subsets: ["latin"] });
import GraphCard from "./GraphCard";
import DataTable from "./DataTable";
import DataRules from "./DataRules";
import DataMetrics from "./DataMetrics";

const aa = [1, 2, 4, 5, 6];

export default function DataTab({ data }: any) {
  const [activeTab, setActiveTab] = React.useState("data");
  const tabData = [
    {
      label: "Data",
      value: "data",
      icon: (
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 5C19 7.21 14.97 9 10 9C5.03 9 1 7.21 1 5M19 5C19 2.79 14.97 1 10 1C5.03 1 1 2.79 1 5M19 5V10M1 5V10M19 10C19 12.21 14.97 14 10 14C5.03 14 1 12.21 1 10M19 10V15C19 17.21 14.97 19 10 19C5.03 19 1 17.21 1 15V10"
            stroke={`${activeTab === "data" ? "black" : "#8E8E8E"} `}
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      ),
      desc: <DataTable data={data} />,
    },
    {
      label: "Profile",
      value: "profile",
      icon: (
        <svg
          width="18"
          height="14"
          viewBox="0 0 18 14"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1.28571 0H7.71429C8.05528 0 8.3823 0.144489 8.62342 0.401682C8.86454 0.658875 9 1.0077 9 1.37143C9 1.73515 8.86454 2.08398 8.62342 2.34118C8.3823 2.59837 8.05528 2.74286 7.71429 2.74286H1.28571C0.944722 2.74286 0.617695 2.59837 0.376577 2.34118C0.135459 2.08398 0 1.73515 0 1.37143C0 1.0077 0.135459 0.658875 0.376577 0.401682C0.617695 0.144489 0.944722 0 1.28571 0ZM10.2857 10.9714H16.7143C17.0553 10.9714 17.3823 11.1159 17.6234 11.3731C17.8645 11.6303 18 11.9791 18 12.3429C18 12.7066 17.8645 13.0554 17.6234 13.3126C17.3823 13.5698 17.0553 13.7143 16.7143 13.7143H10.2857C9.94472 13.7143 9.6177 13.5698 9.37658 13.3126C9.13546 13.0554 9 12.7066 9 12.3429C9 11.9791 9.13546 11.6303 9.37658 11.3731C9.6177 11.1159 9.94472 10.9714 10.2857 10.9714ZM1.28571 5.48571H16.7143C17.0553 5.48571 17.3823 5.6302 17.6234 5.8874C17.8645 6.14459 18 6.49342 18 6.85714C18 7.22087 17.8645 7.5697 17.6234 7.82689C17.3823 8.08408 17.0553 8.22857 16.7143 8.22857H1.28571C0.944722 8.22857 0.617695 8.08408 0.376577 7.82689C0.135459 7.5697 0 7.22087 0 6.85714C0 6.49342 0.135459 6.14459 0.376577 5.8874C0.617695 5.6302 0.944722 5.48571 1.28571 5.48571Z"
            fill={`${activeTab === "profile" ? "black" : "#8E8E8E"} `}
          />
        </svg>
      ),
      desc: <GraphCard data={data} />,
    },
    {
      label: "Rules",
      value: "rules",
      icon: (
        <svg
          width="19"
          height="14"
          viewBox="0 0 19 14"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            opacity="0.5"
            d="M13.29 5.46629L11.2528 3.5193C11.0731 3.34758 10.9722 3.11468 10.9722 2.87183C10.9722 2.75158 10.9969 2.63252 11.0451 2.52142C11.0932 2.41033 11.1638 2.30939 11.2528 2.22436C11.3417 2.13934 11.4474 2.07189 11.5636 2.02587C11.6798 1.97986 11.8044 1.95617 11.9302 1.95617C12.1843 1.95617 12.428 2.05265 12.6077 2.22436L13.9627 3.5193L17.3644 0.268189C17.5441 0.0964708 17.7878 0 18.0419 0C18.296 0 18.5397 0.0964708 18.7194 0.268189C18.8991 0.439908 19 0.672809 19 0.915656C19 1.1585 18.8991 1.3914 18.7194 1.56312L14.6449 5.4571C14.2702 5.82446 13.6648 5.82446 13.29 5.46629ZM7.68763 2.44478H0.960954C0.432429 2.44478 0 2.85805 0 3.36317C0 3.86828 0.432429 4.28156 0.960954 4.28156H7.68763C8.21616 4.28156 8.64859 3.86828 8.64859 3.36317C8.64859 2.85805 8.21616 2.44478 7.68763 2.44478ZM17.5758 7.68879C17.4869 7.60366 17.3813 7.53611 17.2651 7.49002C17.1488 7.44394 17.0242 7.42022 16.8984 7.42022C16.7725 7.42022 16.6479 7.44394 16.5317 7.49002C16.4154 7.53611 16.3098 7.60366 16.2209 7.68879L14.4143 9.41537L12.6077 7.68879C12.428 7.51708 12.1843 7.4206 11.9302 7.4206C11.6761 7.4206 11.4324 7.51708 11.2528 7.68879C11.0731 7.86051 10.9722 8.09341 10.9722 8.33626C10.9722 8.57911 11.0731 8.81201 11.2528 8.98373L13.0594 10.7103L11.2528 12.4369C11.1638 12.5219 11.0932 12.6228 11.0451 12.7339C10.9969 12.845 10.9722 12.9641 10.9722 13.0843C10.9722 13.2046 10.9969 13.3237 11.0451 13.4348C11.0932 13.5458 11.1638 13.6468 11.2528 13.7318C11.4324 13.9035 11.6761 14 11.9302 14C12.0561 14 12.1806 13.9763 12.2969 13.9303C12.4131 13.8843 12.5187 13.8168 12.6077 13.7318L14.4143 12.0052L16.2209 13.7318C16.4006 13.9035 16.6443 14 16.8984 14C17.1525 14 17.3962 13.9035 17.5758 13.7318C17.7555 13.5601 17.8565 13.3272 17.8565 13.0843C17.8565 12.8415 17.7555 12.6086 17.5758 12.4369L15.7693 10.7103L17.5758 8.98373C17.6649 8.89876 17.7356 8.79784 17.7838 8.68674C17.8321 8.57564 17.8569 8.45654 17.8569 8.33626C17.8569 8.21598 17.8321 8.09688 17.7838 7.98578C17.7356 7.87468 17.6649 7.77376 17.5758 7.68879ZM7.68763 9.79191H0.960954C0.432429 9.79191 0 10.2052 0 10.7103C0 11.2154 0.432429 11.6287 0.960954 11.6287H7.68763C8.21616 11.6287 8.64859 11.2154 8.64859 10.7103C8.64859 10.2052 8.21616 9.79191 7.68763 9.79191Z"
            fill={`${activeTab === "rules" ? "black" : "#8E8E8E"} `}
          />
        </svg>
      ),
      desc: <DataRules data={data} />,
    },
    {
      label: "Metrics",
      value: "metrics",
      icon: (
        <svg
          width="13"
          height="18"
          viewBox="0 0 13 18"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g opacity="0.5">
            <rect
              x="10"
              width="3"
              height="18"
              rx="1.5"
              fill={`${activeTab === "metrics" ? "black" : "#8E8E8E"} `}
            />
            <rect
              x="5"
              y="7"
              width="3"
              height="11"
              rx="1.5"
              fill={`${activeTab === "metrics" ? "black" : "#8E8E8E"} `}
            />
            <rect
              y="12"
              width="3"
              height="6"
              rx="1.5"
              fill={`${activeTab === "metrics" ? "black" : "#8E8E8E"} `}
            />
          </g>
        </svg>
      ),
      desc: <DataMetrics data={data} />,
    },
  ];

  return (
    <div>
      <div className="w-full py-2">
        <div className="flex w-full gap-x-20 justify-end text-[18px]">
          {tabData.map((item, index) => (
            <div
              key={index}
              className={`h-[54px] flex items-center justify-start cursor-pointer gap-x-3 ${
                activeTab === item.value && "text-black"
              }`}
              onClick={() => {
                console.log("CLICKED");
                setActiveTab(item.value);
              }}
            >
              {item.icon}
              {/* <div className="relative w-[18px] h-[18px]">
                <Image src={`/${item.icon}.svg`} alt="brand" fill />
              </div> */}

              <p className={`text-[16px] font-[500] ${cabin.className}`}>
                {item.label}
              </p>
            </div>
          ))}
        </div>
        <div className="w-full h-full">
          {tabData.map((item, i) => {
            if (item.value === activeTab) {
              return <div key={i}>{item.desc && item.desc}</div>;
            }
          })}
        </div>
      </div>
    </div>
  );
}
