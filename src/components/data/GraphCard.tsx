"use client";

import React, { useEffect, useState } from "react";
import {
  Avatar,
  Badge,
  Card,
  CardBody,
  Typography,
} from "@material-tailwind/react";
import Image from "next/image";
import { Progress } from "@material-tailwind/react";
import { Cabin } from "next/font/google";
const cabin = Cabin({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

import {
  Menu,
  MenuHandler,
  MenuList,
  MenuItem,
  Button,
} from "@material-tailwind/react";
import { Doughnut } from "react-chartjs-2";
import {
  Chart,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import MutualFunds1 from "../../../mutualFunds1.json";
import NYSESecurity from "../../../NYSE_SECURITY_GRAPH.json";
import NYSEPrice from "../../../NYSE_PRICE_GRAPH.json";
import { Bar } from "react-chartjs-2";
import { usePathname } from "next/navigation";

Chart.register(ArcElement);
Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

export const options = {
  responsive: true,
  plugins: {
    legend: {
      position: "top" as const,
    },
    title: {
      display: true,
      text: "Chart.js Bar Chart",
    },
  },
};

export const data2 = {
  datasets: [
    {
      label: "Dataset 1",
      data: 2,
      backgroundColor: "rgba(255, 99, 132, 0.5)",
    },
  ],
};

export default function GraphCard({ data }: any) {
  const pathname = usePathname();

  const [json, setJson] = useState<any>([]);

  useEffect(() => {
    const arr = pathname.split("/");
    const id = arr[arr.length - 1];
    console.log(
      "HEllo",
      MutualFunds1[0]!.tableColumnMetrics!.stringMetrics!.uniqueValueCount
    );
    switch (id) {
      case "0":
      case "3":
      case "4":
        setJson(MutualFunds1);
        break;
      case "1":
        setJson(NYSESecurity);
        break;
      default:
        setJson(NYSEPrice);
        break;
    }
  }, []);

  return (
    <div className="w-full text-black grid gap-x-4 md:grid-cols-1 3xl:grid-cols-2 px-3 gap-y-4">
      {json.map((item: any, index: any) => (
        <div key={index}>
          {item.tableColumnMetrics &&
          item.tableColumnMetrics.stringMetrics &&
          item.tableColumnMetrics.stringMetrics.uniqueValueCount ? (
            <>
              <div className="shadow- rounded-lg px-9 py-5 graphBox">
                <div
                  className={`flex justify-between border-b-[1px] border-[#C4C4C4] pb-3 ${cabin.className}`}
                >
                  <div className="w-[70%]">
                    <p className="font-[600] text-[18px]">
                      <span className="mr-3 font-[600] text-[18px] border-b-[2px] border-black">
                        A
                      </span>
                      {item?.name}
                    </p>
                    <p className="text-[14px]">{item.description}</p>
                  </div>
                  <div className="flex flex-col items-center">
                    <p className="text-[48px] font-bold">
                      {item!.tableColumnMetrics!.stringMetrics &&
                      item!.tableColumnMetrics!.stringMetrics.uniqueValueCount
                        ? item!.tableColumnMetrics!.stringMetrics!
                            .uniqueValueCount
                        : "NONE"}
                    </p>
                    <p
                      className={`text-[18px] font-bold text-black ${cabin.className}`}
                    >
                      Unique Values
                    </p>
                  </div>
                </div>
                <div className="w-full h-[230px] px-2 py-3 flex justify-between gap-x-3">
                  <div className="w-[80%] mt-[-3rem]">
                    <Doughnut
                      data={{
                        datasets: [
                          {
                            data: [
                              item!.tableColumnMetrics!.validCount,
                              item!.tableColumnMetrics!.nullCount,
                            ],
                            backgroundColor: ["#4D91FF", "#F65A27"],
                            borderColor: "white",
                          },
                        ],
                      }}
                      options={{
                        plugins: {
                          legend: {
                            display: false,
                          },
                          tooltip: {
                            enabled: false,
                          },
                        },
                        rotation: -90,
                        circumference: 180,
                        cutout: "80%",
                        // maintainAspectRatio: true,
                        // responsive: true,
                      }}
                    />
                  </div>
                  <div className="w-full flex flex-col gap-y-3">
                    <div className="flex justify-between">
                      <div className="flex items-center gap-x-2">
                        <div className="w-4 h-4 bg-[#4D91FF] rounded-full"></div>
                        <p>Valid</p>
                      </div>
                      <div className="flex w-full justify-end gap-x-5">
                        <p>
                          {(
                            item!.tableColumnMetrics!.validCount / 1000
                          ).toFixed(2)}
                          k
                        </p>
                        <p>
                          {(
                            (item!.tableColumnMetrics!.validCount /
                              item!.tableColumnMetrics!.totalCount) *
                            100
                          ).toFixed(2)}
                          %
                        </p>
                      </div>
                    </div>
                    <div className="flex justify-between">
                      <div className="flex items-center gap-x-2">
                        <div className="w-4 h-4 bg-[#FFBC35] rounded-full"></div>
                        <p>Mismatched</p>
                      </div>
                      <div className="flex w-full justify-end gap-x-5">
                        <p>0</p>
                        <p>0%</p>
                      </div>
                    </div>
                    <div className="flex justify-between">
                      <div className="flex items-center gap-x-2">
                        <div className="w-4 h-4 bg-[#F65A27] rounded-full"></div>
                        <p>Missing</p>
                      </div>
                      <div className="flex w-full justify-end gap-x-5">
                        <p>
                          {item!.tableColumnMetrics!.nullCount
                            ? String(item!.tableColumnMetrics!.nullCount)
                            : 0}
                        </p>
                        <p>
                          {" "}
                          {item!.tableColumnMetrics!.nullCount
                            ? (
                                (item!.tableColumnMetrics!.nullCount /
                                  item!.tableColumnMetrics!.totalCount) *
                                100
                              ).toFixed(2)
                            : 0}
                          %
                        </p>
                      </div>
                    </div>
                    <div className="w-full flex flex-col gap-y-3">
                      <div className="flex justify-between">
                        <p>Unique</p>
                        <p>
                          {" "}
                          {(
                            item!.tableColumnMetrics!.validCount / 1000
                          ).toFixed(2)}
                          k
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="w-full flex -mt-[3rem] flex-col justify-between">
                  <p>Most Common Values (Top 4 )</p>
                  <p className="flex flex-col h-[85px] overflow-y-auto pr-3 justify-between items-center">
                    {item!.tableColumnMetrics!.stringMetrics.counts.map(
                      (item: any, i: number) => {
                        if (i < 4) {
                          return (
                            <div
                              key={i}
                              className="w-full mt-3 flex justify-between"
                            >
                              <p className="flex gap-x-3 w-[80%]">
                                <p>{i + 1}.</p>
                                <p>{item.key}</p>
                              </p>
                              <p>{item.value}</p>
                            </div>
                          );
                        }
                        return null;
                      }
                    )}
                  </p>
                </div>
              </div>
            </>
          ) : (
            <div className="graphBox w-full rounded-lg px-9 py-5">
              <div>
                <div
                  className={`flex justify-between border-b-[1px] border-[#C4C4C4] pb-3 ${cabin.className}`}
                >
                  <div className="w-[70%]">
                    <p className="font-[600] text-[20px]">
                      <span className="mr-3 font-[600] text-[20px] border-b-[2px] border-black">
                        #
                      </span>
                      {item?.name}
                    </p>
                    <p className="text-[14px] w-[70%] truncate">
                      {item.description}
                    </p>
                  </div>
                  {/* <div className="flex flex-col items-center">
                    <p className="text-[48px] text-black">
                      {item!.tableColumnMetrics!.stringMetrics &&
                      item!.tableColumnMetrics!.stringMetrics.uniqueValueCount
                        ? item!.tableColumnMetrics!.stringMetrics!
                            .uniqueValueCount
                        : "NONE"}
                    </p>
                    <p
                      className={`text-[18px] font-[600] text-black ${cabin.className}`}
                    >
                      Unique Values
                    </p>
                  </div> */}
                </div>
              </div>
              <div className="">
                <div className="flex">
                  <div className="w-[70%] h-[180px]">
                    <Bar
                      data={{
                        labels: [
                          item.tableColumnMetrics.numericMetrics.quantiles[0]
                            .point,
                          item.tableColumnMetrics.numericMetrics.quantiles[1]
                            .point,
                          item.tableColumnMetrics.numericMetrics.quantiles[2]
                            .point,
                        ],
                        datasets: [
                          {
                            label: `${item.name}`,
                            data: [
                              `${
                                item.tableColumnMetrics &&
                                item.tableColumnMetrics.numericMetrics &&
                                item.tableColumnMetrics.numericMetrics
                                  .quantiles[0].value
                              }`,
                              `${
                                item.tableColumnMetrics &&
                                item.tableColumnMetrics.numericMetrics &&
                                item.tableColumnMetrics.numericMetrics
                                  .quantiles[1].value
                              }`,
                              `${
                                item.tableColumnMetrics &&
                                item.tableColumnMetrics.numericMetrics &&
                                item.tableColumnMetrics.numericMetrics
                                  .quantiles[2].value
                              }`,
                            ],
                            backgroundColor: ["#7FE588", "#7FE588", "#7FE588"],
                            borderColor: "white",
                          },
                        ],
                      }}
                      options={{
                        plugins: {
                          legend: {
                            position: "top" as const,
                          },
                          title: {
                            display: true,
                            text: "",
                          },
                          tooltip: {
                            enabled: false,
                          },
                        },
                      }}
                    />
                  </div>
                  <div className="w-[50%] px-4">
                    <div
                      key={index}
                      className="flex w-full justify-between gap-x-6 "
                    >
                      <p>Mean</p>
                      <p>
                        {/**ts-ignore */}
                        {(
                          item!.tableColumnMetrics!.numericMetrics!.mean /
                          1000000
                        ).toFixed(2)}
                        k
                      </p>
                    </div>
                    <div
                      key={index}
                      className="flex w-full justify-between gap-x-6 "
                    >
                      <p>Standard Deviation</p>
                      <p>
                        {(
                          +item.tableColumnMetrics.numericMetrics
                            ?.standardDeviation / 1000000
                        ).toFixed(2)}
                        k
                      </p>
                    </div>
                    <div
                      key={index}
                      className="flex w-full justify-between gap-x-6 "
                    >
                      <p>Finite Count</p>
                      <p>
                        {+item.tableColumnMetrics.numericMetrics?.finiteCount}
                      </p>
                    </div>
                    <div
                      key={index}
                      className="flex w-full justify-between gap-x-6 "
                    >
                      <p>Minimum</p>
                      <p>{+item.tableColumnMetrics.numericMetrics?.minimum}</p>
                    </div>
                    <div
                      key={index}
                      className="flex w-full justify-between gap-x-6 "
                    >
                      <p>Maximum</p>
                      <p>
                        {(
                          +item.tableColumnMetrics.numericMetrics?.maximum /
                          1000000
                        ).toFixed(2)}
                        k
                      </p>
                    </div>

                    <div
                      key={index}
                      className="flex  gap-x-6 my-2 text-black w-full justify-between"
                    >
                      <p>Point</p>
                      <p>Value</p>
                    </div>
                    {item.tableColumnMetrics &&
                      item.tableColumnMetrics.numericMetrics &&
                      item.tableColumnMetrics.numericMetrics.quantiles.map(
                        (i: any, index: number) => (
                          <div key={index} className="">
                            <div className="flex gap-x-6 w-full justify-between">
                              <p>{i.point}</p>
                              <p>{i.value}</p>
                            </div>
                          </div>
                        )
                      )}
                  </div>
                </div>
                <div className="w-full flex mt-2 justify-between">
                  <div className="w-[56%] mt-2">
                    <Progress
                      className="bg-[#F65A27]"
                      value={
                        +(+(
                          (item!.tableColumnMetrics!.validCount /
                            item!.tableColumnMetrics!.totalCount) *
                          100
                        )).toFixed(2)
                      }
                    />
                    <div className="w-full mt-5 flex flex-col gap-y-3">
                      <div className="flex justify-between">
                        <p>Unique</p>
                        <p>
                          {" "}
                          {(
                            item!.tableColumnMetrics!.validCount / 1000
                          ).toFixed(2)}
                          k
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="w-[40%]">
                    <div className="w-full flex flex-col gap-y-3">
                      <div className="flex justify-between">
                        <div className="flex items-center gap-x-2">
                          <div className="w-4 h-4 bg-[#4D91FF] rounded-full"></div>
                          <p>Valid</p>
                        </div>
                        <div className="flex w-full justify-end gap-x-5">
                          <p>
                            {(
                              item!.tableColumnMetrics!.validCount / 1000
                            ).toFixed(2)}
                            k
                          </p>
                          <p>
                            {(
                              (item!.tableColumnMetrics!.validCount /
                                item!.tableColumnMetrics!.totalCount) *
                              100
                            ).toFixed(2)}
                            %
                          </p>
                        </div>
                      </div>
                      <div className="flex justify-between">
                        <div className="flex items-center gap-x-2">
                          <div className="w-4 h-4 bg-[#FFBC35] rounded-full"></div>
                          <p>Mismatched</p>
                        </div>
                        <div className="flex w-full justify-end gap-x-5">
                          <p>0</p>
                          <p>0%</p>
                        </div>
                      </div>
                      <div className="flex justify-between">
                        <div className="flex items-center gap-x-2">
                          <div className="w-4 h-4 bg-[#F65A27] rounded-full"></div>
                          <p>Missing</p>
                        </div>
                        <div className="flex w-full justify-end gap-x-5">
                          <p>
                            {item!.tableColumnMetrics!.nullCount
                              ? String(item!.tableColumnMetrics!.nullCount)
                              : 0}
                          </p>
                          <p>
                            {" "}
                            {item!.tableColumnMetrics!.nullCount
                              ? (
                                  (item!.tableColumnMetrics!.nullCount /
                                    item!.tableColumnMetrics!.totalCount) *
                                  100
                                ).toFixed(2)
                              : 0}
                            %
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );
}
